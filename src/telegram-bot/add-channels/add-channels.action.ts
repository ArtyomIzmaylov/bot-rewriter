import {AddStep, Ctx, Scene, SceneEnter, SceneLeave} from "nestjs-puregram";
import {MessageContext} from "puregram";
import {StepContext} from "@puregram/scenes";
import {SessionInterface} from "@puregram/session";
import {Inject, Injectable} from "@nestjs/common";
import {LinkModel} from "../../model/link/link.model";
import {ChannelCheckerInterface} from "../../checker/channel.checker.interface";
import {KeyboardInterface} from "../keyboard/keyboard.interface";

interface AddChannelsInterface extends Record<string, any>{
    userChannel : LinkModel
    channels : LinkModel[]
}

@Injectable()
@Scene('AddChannels')
export class AddChannelsAction {


    constructor(
        @Inject('CUSTOM_CHANNEL_CHECKER') private checker : ChannelCheckerInterface,
        @Inject('MAIN_KEYBOARD') private keyboard : KeyboardInterface,
    ) {
    }

    @SceneEnter()
    async enter(@Ctx() telegramContext: MessageContext & StepContext<AddChannelsInterface>) {
        if (telegramContext.scene.step.firstTime) {
            await telegramContext.send('–î–æ–±–∞–≤—å —Å–≤–æ–π —Ç–µ–ª–µ–≥—Ä–∞–º –∫–∞–Ω–∞–ª :)', {
                reply_markup : {
                    remove_keyboard : true
                }
            })
            telegramContext.scene.state.channels = []
        }
    }
    @SceneLeave()
    async leave(@Ctx() telegramContext: MessageContext & StepContext<AddChannelsInterface>): Promise<unknown> {
        //–¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –Ω–µ–∫–∏–π request converter
        if (telegramContext.scene.state.channels.length > 3) {
            await telegramContext.send('–í–∞–º –Ω–µ–ª—å–∑—è –¥–æ–±–∞–≤–∏—Ç—å –±–æ–ª—å—à–µ 3-—Ö –∫–∞–Ω–∞–ª–æ–≤, –Ω–µ—Ç—É –ø–æ–¥–ø–∏—Å–∫–∏.', this.keyboard)
            return await telegramContext.send('–í—ã–±–µ—Ä–∏—Ç–µ –¥–∞–ª—å–Ω–µ–π—à–µ–µ –¥–µ–π—Å—Ç–≤–∏–µ', {
                reply_markup : this.keyboard
            })
        }
        const checkedChannels = (await this.checker.checkByLinks(telegramContext.scene.state.channels)).checkedChannels

        for (const channels of checkedChannels) {
            await telegramContext.send(`–ö–∞–Ω–∞–ª ${channels.channelLink}` +
                (channels.isChannelExists ? ' –±—ã–ª –¥–æ–±–∞–≤–ª–µ–Ω üéâ' : ' –Ω–µ –±—ã–ª –¥–æ–±–∞–≤–ª–µ–Ω, —Ç.–∫. –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç, –ª–∏–±–æ –≤—ã —É–∫–∞–∑–∞–ª–∏ –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—É—é —Å—Å—ã–ª–∫—É.üò≠')
            );
        }

        return await telegramContext.send('–í—ã–±–µ—Ä–∏—Ç–µ –¥–∞–ª—å–Ω–µ–π—à–µ–µ –¥–µ–π—Å—Ç–≤–∏–µ', {
            reply_markup : this.keyboard
        })

    }
    @AddStep(1)
    async userChannel(@Ctx() telegramContext: MessageContext & SessionInterface  & StepContext<AddChannelsInterface>): Promise<unknown> {
        if (telegramContext.scene.step.firstTime || !telegramContext.hasText) {
            return await telegramContext.send('\n\n –î–ª—è —ç—Ç–æ–≥–æ –∫–∞–Ω–∞–ª–∞ –º—ã –ø–µ—Ä–µ–ø–∏—Å—ã–≤–∞—Ç—å –∫–æ–Ω—Ç–µ–Ω—Ç —Å –¥—Ä—É–≥–∏—Ö –∫–∞–Ω–∞–ª–æ–≤üòéüòâ');
        }
        telegramContext.scene.state.userChannel = {
            link : telegramContext.text
        }
        return await telegramContext.scene.step.next()
    }
    @AddStep(2)
    async firstChannel(@Ctx() telegramContext: MessageContext & SessionInterface  & StepContext<AddChannelsInterface>): Promise<unknown> {
        if (telegramContext.scene.step.firstTime || !telegramContext.hasText) {
            return await telegramContext.send('–û—Ç–ø—Ä–∞–≤—å —Å—Å—ã–ª–∫–∏ –Ω–∞ —Ç–µ–ª–µ–≥—Ä–∞–º –∫–∞–Ω–∞–ª—ã –¥–ª—è –ø–µ—Ä–µ–ø–∏—Å—ã–≤–∞–Ω–∏—è. –†–∞–∑–¥–µ–ª–∏ —Å—Å—ã–ª–∫–∏ –∑–∞–ø—è—Ç–æ–π.');
        }
        telegramContext.scene.state.channels = telegramContext.text.split(',').map(link => {
            return {link: link}
        })
        return await telegramContext.scene.step.next()
    }


}