import {AddStep, Ctx, Scene, SceneEnter, SceneLeave} from "nestjs-puregram";
import {MessageContext} from "puregram";
import {StepContext} from "@puregram/scenes";
import {SessionInterface} from "@puregram/session";
import {ChannelMockRepository} from "../../repository/channel/channel-mock.repository";
import {ContentRewriterInterface} from "../../rewriter/content.rewriter.interface";
import {UserChannel} from "../../repository/channel/channel.model";
import {Inject} from "@nestjs/common";

interface RewriteContentInterface extends Record<string, any>{
    userChannels : UserChannel[]
    chosenChannel : UserChannel
}



@Scene('RewriteContent')
export class RewriteContentHandler {
    constructor(
        @Inject('CUSTOM_MOCK_REPOSITORY') private readonly repository : ChannelMockRepository,
        @Inject('CUSTOM_CONTENT_REWRITER') private readonly rewriter : ContentRewriterInterface,
        ) {

    }

    private async sendContentInChunks(rewrittenContent: string, @Ctx() context: MessageContext, interval: number) {
        //–ü—Ä–∏–≤–∞—Ç–Ω—ã–π –º–µ—Ç–æ–¥, –∫–æ—Ç–æ—Ä—ã–π –ø–æ–∑–≤–æ–ª—è–µ—Ç –æ–±–æ–π—Ç–∏ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ —Ç–µ–ª–µ–≥–∞—Ä–º–∞ –≤ 4000 —Å–∏–º–≤–æ–ª–æ–º–æ–≤.
        let startIndex = 0;
        const sendChunks = async function* () {
            while (startIndex < rewrittenContent.length) {
                const endIndex = Math.min(startIndex + 4000, rewrittenContent.length);
                const chunk = rewrittenContent.substring(startIndex, endIndex);
                await context.send(chunk);
                startIndex = endIndex;
                yield;
                if (startIndex < rewrittenContent.length) {
                    await new Promise(resolve => setTimeout(resolve, interval));
                }
            }
        };

        for await (const _ of sendChunks()) {
            // –ë–ª–æ–∫ –±—É–¥–µ—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω –ø–æ—Å–ª–µ –æ—Ç–ø—Ä–∞–≤–∫–∏ –∫–∞–∂–¥–æ–≥–æ —á–∞–Ω–∫–∞
        }

        await context.send(`–ü–æ–∑–¥—Ä–∞–≤–ª—è—é, –≤—ã —É—Å–ø–µ—à–Ω–æ –ø–µ—Ä–µ–ø–∏—Å–∞–ª–∏ –∫–æ–Ω—Ç–µ–Ω—Ç. \n\n<i>(P.S –í–∞–º –æ—Ç–¥–∞–ª—Å—è –∫–æ–Ω—Ç–µ–Ω—Ç —Å –≤—ã–±—Ä–∞–Ω–Ω—ã—Ö —Ç–µ–ª–µ–≥—Ä–∞–º –∫–∞–Ω–∞–ª–æ–≤. –°–µ—Ä–≤–∏—Å –¥–ª—è –ø–µ—Ä–µ–ø–∏—Å—ã–≤–∞–Ω–∏—è –µ—â—ë –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Çüòìüòìüòì. –ú–æ–∂–µ—Ç–µ –∫–æ–Ω—Ç–µ–Ω—Ç –≤—Å—Ç–∞–≤–∏—Ç—å –≤ ChatGPT –∏–ª–∏ –¥—Ä—É–≥—É—é –Ω–µ–π—Ä–æ—Å–µ—Ç—åüòâ</i>)`, { parse_mode: "HTML" });
    }
    @SceneEnter()
    async enter(@Ctx() context: MessageContext & StepContext<RewriteContentInterface>): Promise<unknown> {
        if (context.scene.step.firstTime) {
            context.scene.state.userChannels = (await this.repository.findById(context.from.id)).userChannels
            return context.send('Welcome!');
        }
    }
    @SceneLeave()
    async leave(@Ctx() context: MessageContext & StepContext<RewriteContentInterface>): Promise<void> {

        const rewrittenContent  = (await this.rewriter.rewrite({
            channelsToRewrite : context.scene.state.chosenChannel.channelsToRewrite
        })).rewrittenContent
        await this.sendContentInChunks(rewrittenContent, context, 2000)
    }
    @AddStep(1)
    async userChannel(@Ctx() context: MessageContext & SessionInterface  & StepContext<RewriteContentInterface>): Promise<unknown> {
        if (context.scene.step.firstTime || !context.hasText) {
            const userChannels = context.scene.state.userChannels.map((channel, i) => {
                const rewrittenChannels = (channel.channelsToRewrite.map(chn=>chn.link).join('\n‚Äî '))
                return `<b>‚û°Ô∏è    ${channel.userChannel.link}    ‚¨ÖÔ∏è</b>: \n\n\n <i>–≠—Ç–æ –∫–∞–Ω–∞–ª—ã –æ—Ç–∫—É–¥–∞ –±—É–¥–µ—Ç –ø–µ—Ä–µ–ø–∏—Å—ã–≤–∞—Ç—å—Å—è –∫–æ–Ω—Ç–µ–Ω—Ç. –í—ã –∏—Ö —Ä–∞–Ω–µ–µ –¥–æ–±–∞–≤–∏–ª–∏.\n\n ‚Äî ${rewrittenChannels} \n</i>`
            }).join('\n')
            return await context.send(`–í—ã–±–µ—Ä–∏ —Å–≤–æ–π —Ç–µ–ª–µ–≥—Ä–∞–º –∫–∞–Ω–∞–ª –∏ –æ—Ç–ø—Ä–∞–≤—å —Å—Å—ã–ª–∫—É\n\n${userChannels}\n(P.S.–•—Ä–∞–Ω–∏–ª–∏—â–µ –∫–∞–Ω–∞–ª–æ–≤ –µ—â—ë –Ω–µ —Å–¥–µ–ª–∞–Ω–æ, –ø—Ä–µ–¥—Å—Ç–∞–≤–∏–º, —á—Ç–æ –¥–æ–±–∞–≤–ª–µ–Ω–Ω—ã–µ –∫–∞–Ω–∞–ª—ã –æ—Ç—Ç—É–¥–∞ –ø—Ä–∏–ª–µ—Ç–∞—é—Ç)`, {
                parse_mode : 'HTML'
            });

        }
        const chosenChannel = context.scene.state.userChannels.find(chn => {
            if (chn.userChannel.link === context.text) {
                return chn
            }
        })

        if (!chosenChannel) {
            await context.send('–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞—è —Å—Å—ã–ª–∫–∞. –í–≤–µ–¥–∏—Ç–µ –∫–∞–Ω–∞–ª, –ø—Ä–µ–¥–æ–∂–µ–Ω–Ω—ã–π –∏–∑ —Å–ø–∏—Å–∫–∞')
        }
        else {
            context.scene.state.chosenChannel = chosenChannel
            return await context.scene.step.next()
        }

    }

}