import {AddStep, Ctx, Scene, SceneEnter, SceneLeave} from "nestjs-puregram";
import {MessageContext} from "puregram";
import {StepContext} from "@puregram/scenes";
import {SessionInterface} from "@puregram/session";
import {Inject, Injectable} from "@nestjs/common";
import {LinkModel} from "../../model/link/link.model";
import {ChannelCheckerInterface} from "../../checker/channel.checker.interface";

interface AddChannelsInterface extends Record<string, any>{
    userChannel : LinkModel
    channels : LinkModel[]
}

@Injectable()
@Scene('AddChannels')
export class AddChannelsHandler {


    constructor(@Inject('CUSTOM_CHANNEL_CHECKER') private checker : ChannelCheckerInterface) {
    }

    @SceneEnter()
    enter(@Ctx() context: MessageContext & StepContext<AddChannelsInterface>): Promise<unknown> {
        if (context.scene.step.firstTime) {
            context.scene.state.channels = []
            return context.send('–û—Ç–ø—Ä–∞–≤—å –Ω–∞–∑–≤–∞–Ω–∏–µ —Å–≤–æ–µ–≥–æ —Ç–µ–ª–µ–≥—Ä–∞–º –∫–∞–Ω–∞–ª–∞ :)');
        }
    }
    @SceneLeave()
    async leave(@Ctx() context: MessageContext & StepContext<AddChannelsInterface>): Promise<void> {
        //–¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –Ω–µ–∫–∏–π request converter
        const checkedChannels = (await this.checker.checkByLinks(context.scene.state.channels)).checkedChannels

        checkedChannels.map(channels => {
            context.send(`–ö–∞–Ω–∞–ª ${channels.channelLink}` + (channels.isChannelExists ? ' –±—ã–ª –¥–æ–±–∞–≤–ª–µ–Ω üéâ' : ' –Ω–µ –±—ã–ª –¥–æ–±–∞–≤–ª–µ–Ω, —Ç.–∫. –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç, –ª–∏–±–æ –≤—ã —É–∫–∞–∑–∞–ª–∏ –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—É—é —Å—Å—ã–ª–∫—É.üò≠'));
        })

    }
    @AddStep(1)
    async userChannel(@Ctx() context: MessageContext & SessionInterface  & StepContext<AddChannelsInterface>): Promise<unknown> {
        if (context.scene.step.firstTime || !context.hasText) {
            return await context.send('\n\n –î–ª—è —ç—Ç–æ–≥–æ –∫–∞–Ω–∞–ª–∞ –º—ã –ø–µ—Ä–µ–ø–∏—Å—ã–≤–∞—Ç—å –∫–æ–Ω—Ç–µ–Ω—Ç —Å –¥—Ä—É–≥–∏—Ö –∫–∞–Ω–∞–ª–æ–≤üòéüòâ');
        }
        context.scene.state.userChannel = {
            link : context.text
        }
        return await context.scene.step.next()
    }
    @AddStep(2)
    async firstChannel(@Ctx() context: MessageContext & SessionInterface  & StepContext<AddChannelsInterface>): Promise<unknown> {
        if (context.scene.step.firstTime || !context.hasText) {
            return await context.send('–û—Ç–ø—Ä–∞–≤—å –Ω–∞–∑–≤–∞–Ω–∏–µ 1-–≥–æ –∫–∞–Ω–∞–ª–∞');
        }
        context.scene.state.channels = [...context.scene.state.channels, {link : context.text}]
        return await context.scene.step.next()
    }
    @AddStep(3)
    async secondChannel(@Ctx() context: MessageContext & SessionInterface  & StepContext<AddChannelsInterface>): Promise<unknown> {
        if (context.scene.step.firstTime || !context.hasText) {
            return await context.send('–û—Ç–ø—Ä–∞–≤—å –Ω–∞–∑–≤–∞–Ω–∏–µ 2-–≥–æ –∫–∞–Ω–∞–ª–∞');
        }
        context.scene.state.channels = [...context.scene.state.channels, {link : context.text}]

        return await context.scene.step.next()
    }
    @AddStep(4)
    async thirdChannel(@Ctx() context: MessageContext & SessionInterface  & StepContext<AddChannelsInterface>): Promise<unknown> {
        if (context.scene.step.firstTime || !context.hasText) {
            console.log(context.scene.state)

            return await context.send('–û—Ç–ø—Ä–∞–≤—å –Ω–∞–∑–≤–∞–Ω–∏–µ 3-–≥–æ –∫–∞–Ω–∞–ª–∞');
        }
        context.scene.state.channels = [...context.scene.state.channels, {link : context.text}]
        return await context.scene.step.next()
    }

}